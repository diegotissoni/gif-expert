{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GidGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categories","type","value","onChange","target","GifGridItem","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","GifExpertApp","i","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,aADD,mBACrCC,EADqC,KACzBC,EADyB,KAa5C,OACI,mCACI,sBAAMC,SARO,SAACC,GAClBA,EAAEC,iBACFN,GAAc,SAAAO,GAAU,OAAKL,GAAL,mBAAoBK,OAC5CJ,EAAc,KAKV,SACI,uBACIK,KAAK,OACLC,MAAOP,EACPQ,SAhBU,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,e,QCNlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEhC,OADAC,QAAQC,IAAI,CAACH,QAAOC,QAEhB,sBAAKG,UAAU,yCAAf,UACI,qBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,kCAAKA,EAAL,W,uBCPCO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbR,EADa,0FAC4ES,UAAUF,GADtF,gDAEIG,MAAMV,GAFV,cAEbW,EAFa,gBAGEA,EAASC,OAHX,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRlB,MAAOiB,EAAIjB,MACXC,IAAKgB,EAAIE,OAAOC,iBAAiBnB,QATtB,kBAaZc,GAbY,4CAAH,sDCIPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAX,GACFY,YACI,WAAYH,EAAS,CACjBV,KAAMC,EACNO,SAAS,MACR,UAElB,IAEIC,EDfyBK,CAAapB,GAAhCW,EAFsB,EAE5BL,KAAcQ,EAFc,EAEdA,QAGrB,OACI,qCACI,6BAAKd,IAEJc,GAAW,mBAAGlB,UAAU,oCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SACI,6BAEQe,EAAOH,KAAI,SAACC,GAAD,OACH,cAAC,EAAD,eAEQA,GADCA,EAAIC,eEU9BW,EA1BM,WAAO,IAAD,EAEazC,mBAAS,CAAC,cAFvB,mBAEhBM,EAFgB,KAEJP,EAFI,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQO,EAAWsB,KAAI,SAACR,EAAUsB,GAAX,OACX,cAAC,EAAD,CAEItB,SAAUA,GADLA,YCdjCuB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d17da22d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('Categoria');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setCategories(categories => [inputValue, ...categories]);\n        setInputValue('');\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n            </form>\n        </>\n    )\n};\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nexport const GifGridItem = ({title, url}) => {\n    console.log({title, url});\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p> {title} </p>\n        </div>\n    )\n};\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=xD2bV7EluqblWhct3QqYMyFFovGsDBGP&q=${encodeURI(category)}&limit=10&offset=0&rating=g&lang=en`;\n    const response = await fetch(url);\n    const {data} = await response.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url,\n        }\n    });\n\n    return gifs;\n};\n","import React, {useState, useEffect} from 'react';\nimport {GifGridItem} from \"./GifGridItem\";\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({category}) => {\n\n    const {data: images, loading} = useFetchGifs(category);\n\n\n    return (\n        <>\n            <h3>{category}</h3>\n\n            {loading && <p className=\"animate__animated animate__fadeIn\">Loading</p>}\n\n            <div className=\"card-grid\">\n                <ol>\n                    {\n                        images.map((img) => (\n                                <GifGridItem\n                                    key={img.id}\n                                    {...img}\n                                />\n                            )\n                        )\n                    }\n                </ol>\n            </div>\n        </>\n    )\n}\n\n\n\n","import {useEffect, useState} from \"react\";\nimport {getGifs} from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(gifs => {\n                setTimeout(\n                    function() {setState({\n                        data: gifs,\n                        loading: false\n                    })}, 3000);\n            });\n    }, []);\n\n    return state;\n};\n","import React, {useState} from 'react';\nimport {AddCategory} from \"./components/AddCategory\";\nimport {GifGrid} from \"./components/GidGrid\";\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n\n            <ol>\n                {\n                    categories.map((category, i) => (\n                        <GifGrid\n                            key={category}\n                            category={category}\n                        />)\n                    )\n                }\n            </ol>\n        </>\n    )\n};\n\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}